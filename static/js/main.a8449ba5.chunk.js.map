{"version":3,"sources":["redux/reducers/userReducer.js","redux/reducers/index.js","redux/actions/userActions.js","redux/store.js","Components/Input.js","Components/Phone.js","Components/InputType.js","Components/ForminkInput.js","config/ConfigForm.js","Pages/Registry.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isFetching","profile","undefined","errors","rootReducer","combineReducers","form","reducer","user","state","action","type","Object","assign","data","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","Input","label","field","className","Phone","onChange","evento","target","name","value","RegExp","test","setFieldValue","InputType","props","options","FormikInput","sizes","styles","entrepreneurDataConfig","accessDataConfig","mapDispatchToProps","fetchUserRegistry","payload","dispatch","fetch","method","headers","body","JSON","stringify","then","response","json","result","userRegistrySuccess","catch","error","userRegistryFailure","message","connect","initialValues","idusuario","dni","nombre","descripcion","nombree","celular","correo","url","username","clave","mov_usu","onSubmit","values","console","log","map","item","index","key","component","App","store","path","Registry","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8449ba5.chunk.js","sourcesContent":["import { \r\n  USER_REGISTRY_REQUEST,\r\n  USER_REGISTRY_SUCCESS,\r\n  USER_REGISTRY_FAILURE, \r\n} from \"../actions/userActions\";\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  profile: undefined,\r\n  errors: undefined,\r\n}\r\n\r\nexport default function reducer(\r\n  state = initialState,\r\n  action,\r\n){\r\n  switch (action.type) {\r\n    case USER_REGISTRY_REQUEST:\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n      })\r\n\r\n    case USER_REGISTRY_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        profile: action.data,\r\n      })\r\n\r\n    case USER_REGISTRY_FAILURE:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        errors: action.errors,\r\n      })\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport { reducer } from 'redux-form'\r\n\r\nimport userReducer from './userReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  form: reducer,\r\n  user: userReducer\r\n})\r\n\r\nexport default rootReducer","export const USER_REGISTRY_REQUEST = 'USER_REGISTRY_REQUEST'\r\nexport const USER_REGISTRY_FAILURE = 'USER_REGISTRY_FAILURE'\r\nexport const USER_REGISTRY_SUCCESS = 'USER_REGISTRY_SUCCESS'\r\n\r\nexport const userRegistryRequest = () => ({\r\n  type: USER_REGISTRY_REQUEST\r\n})\r\n\r\nexport const userRegistrySuccess = payload => ({\r\n  type: USER_REGISTRY_SUCCESS,\r\n  ...payload\r\n})\r\n\r\nexport const userRegistryFailure = payload => ({\r\n  type: USER_REGISTRY_FAILURE,\r\n  ...payload\r\n})\r\n\r\nexport const fetchUserRegistry = payload => {\r\n  return dispatch =>{\r\n    dispatch(userRegistryRequest())\r\n    return fetch('https://moliemprendedor.munimolina.gob.pe/adm_emprendedor1.php', {\r\n      method: \"POST\",\r\n      headers: { 'Content-Type':'application/json' },\r\n      body: JSON.stringify(payload),\r\n    })\r\n    .then(response => response.json())\r\n    .then(result => dispatch(userRegistrySuccess(result)))\r\n    .catch(error => {\r\n      dispatch(userRegistryFailure(error.message))\r\n    })\r\n  }\r\n}","import { createStore, applyMiddleware, compose  } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react'\r\n\r\nconst Input = ({label, type, field}) => {\r\n  return(\r\n    <label className=\"form-label\">\r\n      {label}\r\n      {type === 'textarea' ? \r\n        <textarea className=\"form-input\" {...field}></textarea>\r\n        : <input className=\"form-input\" type={type} {...field} />\r\n      }\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default Input","import React from 'react'\r\n\r\nconst Phone = ({label, form, field}) => {\r\n  const handleChangeInput = (evento) => {\r\n    const { name, value } = evento.target;\r\n    let regex = new RegExp(\"^[0-9]{0,9}$\");\r\n\r\n    if (regex.test(value)) {\r\n      form.setFieldValue(name, value)\r\n    }\r\n  }\r\n\r\n  return(\r\n    <label className=\"form-label\">\r\n      {label}\r\n      <input className=\"form-input\" type='text' {...field} onChange={handleChangeInput}  />\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default Phone","import React from 'react'\r\n\r\nimport Input from './Input'\r\nimport Phone from './Phone'\r\n\r\nconst InputType = ({\r\n  type,\r\n  options = [],\r\n  ...props\r\n}) => {\r\n  switch (type) {\r\n    case 'phone':\r\n      return <Phone {...props} />\r\n    default:\r\n      return <Input type={type} {...props} />\r\n  }\r\n}\r\n\r\nexport default InputType","import React from 'react'\r\n\r\nimport InputType from './InputType'\r\n\r\nexport const FormikInput = ({ sizes, styles, ...props }) => {\r\n  return (\r\n    <div>\r\n      <InputType {...props} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormikInput\r\n","export const entrepreneurDataConfig = [\r\n  { label: 'Nombre de la tienda o persona', type: 'text', name: 'nombre' },\r\n  { label: 'Descripción de la tienda o persona', type: 'textarea', name: 'descripcion' },\r\n  { label: 'Nombre de contacto', type: 'text', name: 'nombree' },\r\n  { label: 'Celular de contacto', type: 'phone', name: 'celular' },\r\n  { label: 'URL Facebook', type: 'text', name: 'url' },\r\n]\r\n\r\nexport const accessDataConfig = [\r\n  { label: 'Usuario', type: 'text', name: 'username' },\r\n  { label: 'Contraseña', type: 'password', name: 'clave' },\r\n  { label: 'Confirmar contraseña', type: 'password', name: 'confirmPassword' },\r\n  { label: 'Agregar archivos', type: 'file', name: 'addFiles' },\r\n]","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { connect } from 'react-redux'\r\n\r\nimport FormikInput from '../Components/ForminkInput'\r\nimport { entrepreneurDataConfig, accessDataConfig } from '../config/ConfigForm'\r\nimport { fetchUserRegistry } from '../redux/actions/userActions'\r\n\r\nconst Registry = ({fetchUserRegistry}) => {\r\n  const submitForm = values => {\r\n    fetchUserRegistry(values).then(data => {\r\n      if(!data.errors){\r\n        console.log('success')\r\n      }\r\n    })\r\n  }\r\n  \r\n  const initialValues = {\r\n    idusuario: '',\r\n    dni: '99999999',\r\n    nombre: '',\r\n    descripcion: '',\r\n    nombree: '',\r\n    celular: '',\r\n    correo: 'email@correo.com',\r\n    url: '',\r\n    username: '',\r\n    clave: '',\r\n    mov_usu: 'N'\r\n  }\r\n  \r\n  return(\r\n    <div>\r\n      <div className=\"header\">\r\n        <h2 className=\"title\">Registro</h2>\r\n        <h3 className=\"subtitle\">Ingresa los datos solicitados para formar parte de nuestros distribuidores.</h3>\r\n      </div>\r\n\r\n      <Formik initialValues={initialValues} onSubmit={submitForm}>\r\n        <Form className=\"form\">\r\n          <h3 className=\"section-text\">Datos del Emprendedor</h3>\r\n          {entrepreneurDataConfig.map((item, index) => {\r\n            return (\r\n              <Field \r\n                key={index} \r\n                type={item.type} \r\n                name={item.name} \r\n                label={item.label} \r\n                component={FormikInput} \r\n              />\r\n            )\r\n          })}\r\n\r\n          <h3 className=\"section-text\">Datos de acceso</h3>\r\n          {accessDataConfig.map((item, index) => {\r\n            return (\r\n              <Field \r\n                key={index} \r\n                type={item.type} \r\n                name={item.name} \r\n                label={item.label} \r\n                component={FormikInput} \r\n              />\r\n            )\r\n          })}\r\n\r\n          <span className=\"form-label\">\r\n            <Field\r\n              type='checkbox'\r\n              name='termns'\r\n            />\r\n            Autorizo y Acepto que la Municipalidad de La Molina me notifique los actos administrativos que pudiera emitir a consecuencia de la presente solicitud y/0 procedimiento administrativo al correo electrónico.\r\n          </span>\r\n          \r\n          <div>\r\n            <button>Cancelar</button>\r\n            <button type=\"submit\">Enviar</button>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => state \r\n\r\nconst mapDispatchToProps = { fetchUserRegistry }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Registry)","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport './assets/styles.css'\nimport store from './redux/store'\nimport Registry from './Pages/Registry'\n// import Login from './Pages/Login'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Provider store={store}>\n      <HashRouter>\n        <Switch>\n          <Route path=\"/registro\" component={Registry} />\n          {/* <Route path=\"/login\" component={Login} /> */}\n        </Switch>\n      </HashRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}